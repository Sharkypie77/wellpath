/**
 * @file Firestore Security Rules for HealthWise Hub
 * @description This ruleset enforces a strict user-ownership model for private data
 *  and provides public read access to health articles and tags.
 *
 * Data Structure:
 * - User profiles and associated data (health metrics, medications, appointments, health risk assessments, medical history, allergies) are nested under `/users/{userId}`.
 * - Health articles and tags are stored in top-level collections: `/health_articles` and `/tags`.
 *
 * Key Security Decisions:
 * - User-owned data is secured using path-based authorization (`isOwner(userId)`).
 * - Health articles and tags are publicly readable (`allow get, list: if true`).
 * - Write access to health articles and tags is not currently secured and should be restricted in a production environment.
 * - All write operations on user-owned data require the user to be authenticated (`isSignedIn()`).
 * - `list` operations on user-owned collections are restricted to the owner (`isOwner(userId)`).
 *
 * Denormalization for Authorization:
 * - User-specific data (e.g., health metrics) includes the `userId` field, enabling easy verification of ownership in security rules.
 *
 * Structural Segregation:
 * - Private user data is stored under the `/users/{userId}` collection, while public health articles are stored in the top-level `/health_articles` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile document at /users/user_abc.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete their profile at /users/user_abc.
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot access the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own profile document
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to get their own profile document
      allow get: if isSignedIn() && isOwner(userId);

      // Allow the user to list their own profile document
      allow list: if false;

      // Allow the user to update their own profile document
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own profile document
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures health metrics, allowing only the owner to read and write.
     * @path /users/{userId}/health_metrics/{healthMetricId}
     * @allow (create) User with UID 'user_abc' can create a health metric document under /users/user_abc/health_metrics/.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete health metric document under /users/user_abc/health_metrics/.
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot access health metrics under /users/user_abc/health_metrics/.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/health_metrics/{healthMetricId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create a health metric document
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow the user to get a health metric document
      allow get: if isSignedIn() && isOwner(userId);

      // Allow the user to list health metric documents
      allow list: if isSignedIn() && isOwner(userId);

      // Allow the user to update a health metric document
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow the user to delete a health metric document
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures medications, allowing only the owner to read and write.
     * @path /users/{userId}/medications/{medicationId}
     * @allow (create) User with UID 'user_abc' can create a medication document under /users/user_abc/medications/.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete a medication document under /users/user_abc/medications/.
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot access medications under /users/user_abc/medications/.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/medications/{medicationId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create a medication document
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow the user to get a medication document
      allow get: if isSignedIn() && isOwner(userId);

      // Allow the user to list medication documents
      allow list: if isSignedIn() && isOwner(userId);

      // Allow the user to update a medication document
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow the user to delete a medication document
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures appointments, allowing only the owner to read and write.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User with UID 'user_abc' can create an appointment document under /users/user_abc/appointments/.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete an appointment document under /users/user_abc/appointments/.
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot access appointments under /users/user_abc/appointments/.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create an appointment document
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow the user to get an appointment document
      allow get: if isSignedIn() && isOwner(userId);

      // Allow the user to list appointment documents
      allow list: if isSignedIn() && isOwner(userId);

      // Allow the user to update an appointment document
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow the user to delete an appointment document
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to health articles.
     * @path /health_articles/{healthArticleId}
     * @allow (get, list) Any user can read health articles.
     * @deny (create, update, delete) No one can create, update, or delete health articles without additional authorization.
     * @principle Provides public read access while restricting write access.
     */
    match /health_articles/{healthArticleId} {
      // Allow anyone to read health articles
      allow get, list: if true;

      // TODO: Add authorization for creating, updating, and deleting health articles
      allow create, update, delete: if false;
    }

    /**
     * @description Secures health risk assessments, allowing only the owner to read and write.
     * @path /users/{userId}/health_risk_assessments/{healthRiskAssessmentId}
     * @allow (create) User with UID 'user_abc' can create a health risk assessment document under /users/user_abc/health_risk_assessments/.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete a health risk assessment document under /users/user_abc/health_risk_assessments/.
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot access health risk assessments under /users/user_abc/health_risk_assessments/.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/health_risk_assessments/{healthRiskAssessmentId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create a health risk assessment document
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow the user to get a health risk assessment document
      allow get: if isSignedIn() && isOwner(userId);

      // Allow the user to list health risk assessment documents
      allow list: if isSignedIn() && isOwner(userId);

      // Allow the user to update a health risk assessment document
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow the user to delete a health risk assessment document
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to tags.
     * @path /tags/{tagId}
     * @allow (get, list) Any user can read tags.
     * @deny (create, update, delete) No one can create, update, or delete tags without additional authorization.
     * @principle Provides public read access while restricting write access.
     */
    match /tags/{tagId} {
      // Allow anyone to read tags
      allow get, list: if true;

      // TODO: Add authorization for creating, updating, and deleting tags
      allow create, update, delete: if false;
    }

    /**
     * @description Secures medical history, allowing only the owner to read and write.
     * @path /users/{userId}/medical_history/{medicalHistoryId}
     * @allow (create) User with UID 'user_abc' can create a medical history document under /users/user_abc/medical_history/.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete a medical history document under /users/user_abc/medical_history/.
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot access medical history documents under /users/user_abc/medical_history/.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/medical_history/{medicalHistoryId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create a medical history document
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow the user to get a medical history document
      allow get: if isSignedIn() && isOwner(userId);

      // Allow the user to list medical history documents
      allow list: if isSignedIn() && isOwner(userId);

      // Allow the user to update a medical history document
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow the user to delete a medical history document
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures allergies, allowing only the owner to read and write.
     * @path /users/{userId}/allergies/{allergyId}
     * @allow (create) User with UID 'user_abc' can create an allergy document under /users/user_abc/allergies/.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete an allergy document under /users/user_abc/allergies/.
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot access allergy documents under /users/user_abc/allergies/.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/allergies/{allergyId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create an allergy document
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      // Allow the user to get an allergy document
      allow get: if isSignedIn() && isOwner(userId);

      // Allow the user to list allergy documents
      allow list: if isSignedIn() && isOwner(userId);

      // Allow the user to update an allergy document
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow the user to delete an allergy document
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}